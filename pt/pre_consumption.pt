# Determine how much change is allowed
var allowedMultiplier = in.{{ region }}PreConsumptionMultiplier / 100;
var amortizedMultiplier = in.amortizedModelOffset / 100;
var pointDuration = 2050 - 2023;  # Start applying offset in 2023.

# Determine deltas from Monte Carlo
var agricultureDeltaMc = in.{{ region }}PreConsumptionAgricultureMT * allowedMultiplier;
var constructionDeltaMc = in.{{ region }}PreConsumptionConstructionMT * allowedMultiplier;
var electronicDeltaMc = in.{{ region }}PreConsumptionElectronicMT * allowedMultiplier;
var hlsDeltaMc = in.{{ region }}PreConsumptionHouseholdLeisureSportsMT * allowedMultiplier;
var packagingDeltaMc = in.{{ region }}PreConsumptionPackagingMT * allowedMultiplier;
var transportationDeltaMc = in.{{ region }}PreConsumptionTransportationMT * allowedMultiplier;
var textileDeltaMc = in.{{ region }}PreConsumptionTextileMT * allowedMultiplier;
var otherDeltaMc = in.{{ region }}PreConsumptionOtherMT * allowedMultiplier;

# Determine deltas from point estimate offsets (non-Monte Carlo)
var agricultureDeltaPoint = 0;
var agricultureDeltaPointMax = in.{{ region }}PreConsumptionAgricultureMT;
agricultureDeltaPointMax = agricultureDeltaPointMax * allowedMultiplier;
agricultureDeltaPointMax = agricultureDeltaPointMax * amortizedMultiplier;
agricultureDeltaPointMax = agricultureDeltaPointMax * pointDuration;
change agricultureDeltaPoint by agricultureDeltaPointMax over 2023 to 2050;

var constructionDeltaPoint = 0;
var constructionDeltaPointMax = in.{{ region }}PreConsumptionConstructionMT;
constructionDeltaPointMax = constructionDeltaPointMax * allowedMultiplier;
constructionDeltaPointMax = constructionDeltaPointMax * amortizedMultiplier;
constructionDeltaPointMax = constructionDeltaPointMax * pointDuration;
change constructionDeltaPoint by constructionDeltaPointMax over 2023 to 2050;

var electronicDeltaPoint = 0;
var electronicDeltaPointMax = in.{{ region }}PreConsumptionElectronicMT;
electronicDeltaPointMax = electronicDeltaPointMax * allowedMultiplier;
electronicDeltaPointMax = electronicDeltaPointMax * amortizedMultiplier;
electronicDeltaPointMax = electronicDeltaPointMax * pointDuration;
change electronicDeltaPoint by electronicDeltaPointMax over 2023 to 2050;

var hlsDeltaPoint = 0;
var hlsDeltaPointMax = in.{{ region }}PreConsumptionHouseholdLeisureSportsMT;
hlsDeltaPointMax = hlsDeltaPointMax * allowedMultiplier;
hlsDeltaPointMax = hlsDeltaPointMax * amortizedMultiplier;
hlsDeltaPointMax = hlsDeltaPointMax * pointDuration;
change hlsDeltaPoint by hlsDeltaPointMax over 2023 to 2050;

var packagingDeltaPoint = 0;
var packagingDeltaPointMax = in.{{ region }}PreConsumptionPackagingMT;
packagingDeltaPointMax = packagingDeltaPointMax * allowedMultiplier;
packagingDeltaPointMax = packagingDeltaPointMax * amortizedMultiplier;
packagingDeltaPointMax = packagingDeltaPointMax * pointDuration;
change packagingDeltaPoint by packagingDeltaPointMax over 2023 to 2050;

var transportationDeltaPoint = 0;
var transportationDeltaPointMax = in.{{ region }}PreConsumptionTransportationMT;
transportationDeltaPointMax = transportationDeltaPointMax * allowedMultiplier;
transportationDeltaPointMax = transportationDeltaPointMax * amortizedMultiplier;
transportationDeltaPointMax = transportationDeltaPointMax * pointDuration;
change transportationDeltaPoint by transportationDeltaPointMax over 2023 to 2050;

var textileDeltaPoint = 0;
var textileDeltaPointMax = in.{{ region }}PreConsumptionTextileMT;
textileDeltaPointMax = textileDeltaPointMax * allowedMultiplier;
textileDeltaPointMax = textileDeltaPointMax * amortizedMultiplier;
textileDeltaPointMax = textileDeltaPointMax * pointDuration;
change textileDeltaPoint by textileDeltaPointMax over 2023 to 2050;

var otherDeltaPoint = 0;
var otherDeltaPointMax = in.{{ region }}PreConsumptionOtherMT;
otherDeltaPointMax = otherDeltaPointMax * allowedMultiplier;
otherDeltaPointMax = otherDeltaPointMax * amortizedMultiplier;
otherDeltaPointMax = otherDeltaPointMax * pointDuration;
change otherDeltaPoint by otherDeltaPointMax over 2023 to 2050;

# Determine overall deltas
var agricultureDelta = agricultureDeltaMc + agricultureDeltaPoint;
var constructionDelta = constructionDeltaMc + constructionDeltaPoint;
var electronicDelta = electronicDeltaMc + electronicDeltaPoint;
var hlsDelta = hlsDeltaMc + hlsDeltaPoint;
var packagingDelta = packagingDeltaMc + packagingDeltaPoint;
var transportationDelta = transportationDeltaMc + transportationDeltaPoint;
var textileDelta = textileDeltaMc + textileDeltaPoint;
var otherDelta = otherDeltaMc + otherDeltaPoint;

# Apply limits
limit agricultureDelta to [-1 * out.{{ region }}.consumptionAgricultureMT,];
limit constructionDelta to [-1 * out.{{ region }}.consumptionConstructionMT,];
limit electronicDelta to [-1 * out.{{ region }}.consumptionElectronicMT,];
limit hlsDelta to [-1 * out.{{ region }}.consumptionHouseholdLeisureSportsMT,];
limit packagingDelta to [-1 * out.{{ region }}.consumptionPackagingMT,];
limit transportationDelta to [-1 * out.{{ region }}.consumptionTransportationMT,];
limit textileDelta to [-1 * out.{{ region }}.consumptionTextileMT,];
limit otherDelta to [-1 * out.{{ region }}.consumptionOtherMT,];

# Apply deltas
out.{{ region }}.consumptionAgricultureMT = out.{{ region }}.consumptionAgricultureMT + agricultureDelta;
out.{{ region }}.consumptionConstructionMT = out.{{ region }}.consumptionConstructionMT + constructionDelta;
out.{{ region }}.consumptionElectronicMT = out.{{ region }}.consumptionElectronicMT + electronicDelta;
out.{{ region }}.consumptionHouseholdLeisureSportsMT = out.{{ region }}.consumptionHouseholdLeisureSportsMT + hlsDelta;
out.{{ region }}.consumptionPackagingMT = out.{{ region }}.consumptionPackagingMT + packagingDelta;
out.{{ region }}.consumptionTransportationMT = out.{{ region }}.consumptionTransportationMT + transportationDelta;
out.{{ region }}.consumptionTextileMT = out.{{ region }}.consumptionTextileMT + textileDelta;
out.{{ region }}.consumptionOtherMT = out.{{ region }}.consumptionOtherMT + otherDelta;

# Determine overall consumption change
var overallConsumptionDelta = (
  agricultureDelta +
  constructionDelta +
  electronicDelta +
  hlsDelta +
  packagingDelta +
  transportationDelta +
  textileDelta +
  otherDelta
);

# Update production, determining change to trade
var priorTrade = out.{{ region }}.netImportsMT;

distribute overallConsumptionDelta across [
  out.{{ region }}.primaryProductionMT,
  out.{{ region }}.secondaryProductionMT,
  out.{{ region }}.netImportsMT
] proportionally;

var changeImports = out.{{ region }}.netImportsMT - priorTrade;

# Propogate new imports to other regions production
distribute changeImports across [
  {{#each otherRegions}}
  out.{{ this }}.netExportsMT{{#unless @last}},{{/unless}}
  {{/each}}
] proportionally;

distribute changeImports across [
  {{#each otherRegions}}
  out.{{ this }}.primaryProductionMT by out.{{ this }}.netExportsMT * out.{{ this }}.primaryProductionMT,
  out.{{ this }}.secondaryProductionMT by out.{{ this }}.netExportsMT * out.{{ this }}.secondaryProductionMT{{#unless @last}},{{/unless}}
  {{/each}}
] proportionally;

# Update waste, determining change to trade
var priorWasteTrade = out.{{ region }}.netWasteExportMT;

distribute overallConsumptionDelta across [
  out.{{ region }}.eolRecyclingMT,
  out.{{ region }}.eolLandfillMT,
  out.{{ region }}.eolIncinerationMT,
  out.{{ region }}.eolMismanagedMT,
  out.{{ region }}.netWasteExportMT
] proportionally;

var changeWasteExport = out.{{ region }}.netWasteExportMT - priorWasteTrade;

# Propogate new waste exports to other regions
distribute changeWasteExport across [
  {{#each otherRegions}}
  out.{{ this }}.netWasteImportMT{{#unless @last}},{{/unless}}
  {{/each}}
] proportionally;

distribute changeWasteExport across [
  {{#each otherRegions}}
  out.{{ this }}.eolRecyclingMT by out.{{ this }}.netWasteImportMT * out.{{ this }}.eolRecyclingMT,
  out.{{ this }}.eolLandfillMT by out.{{ this }}.netWasteImportMT * out.{{ this }}.eolLandfillMT,
  out.{{ this }}.eolIncinerationMT by out.{{ this }}.netWasteImportMT * out.{{ this }}.eolIncinerationMT,
  out.{{ this }}.eolMismanagedMT by out.{{ this }}.netWasteImportMT * out.{{ this }}.eolMismanagedMT{{#unless @last}},{{/unless}}
  {{/each}}
] proportionally;
