# Determine target
var targetRateGoal = in.{{ region }}MinimumRecycledContent / 100;

# Determine how much delta to apply (assume phase in)
var targetRate = 0;
var yearsToRecycle = lifecycle of [ out.{{region}}.eolRecyclingMT ];
var delayStart = in.startYear + yearsToRecycle;
var delayEnd = in.endYear;
change targetRate by targetRateGoal over delayStart to delayEnd;

# Determine current recycled content, using current year recycling as
# approximation
var totalConsumption = (
  out.{{ region }}.consumptionPackagingMT + 
  out.{{ region }}.consumptionConstructionMT + 
  out.{{ region }}.consumptionTextileMT + 
  out.{{ region }}.consumptionHouseholdLeisureSportsMT + 
  out.{{ region }}.consumptionElectronicMT + 
  out.{{ region }}.consumptionTransporationMT + 
  out.{{ region }}.consumptionAgricultureMT + 
  out.{{ region }}.consumptionOtherMT + 
  out.{{ region }}.netExportsMT
);
var recycledContent = out.{{ region }}.eolRecyclingMT;

# Determine how much recycled content is missing
var recoveryRate = (1 - in.yieldLoss / 100);
var neededRecycledContentRate = targetRate * totalConsumption / recoveryRate;
var neededMarginRecycling = (
  neededRecycledContentRate -
  recycledContent
);
limit neededMarginRecycling to [0,];

# Determine how much delta to apply - assume gradual compliance
var actualRecycledDelta = 0;
change actualRecycledDelta by neededMarginRecycling over delayStart to delayEnd;

# Determine how much delta is expected after consumption to waste lifecycle
var actualRecycledDeltaLifecycle = 0;
var lifecycleDuration = lifecycle of [
  out.{{ region }}.consumptionPackagingMT,
  out.{{ region }}.consumptionConstructionMT,
  out.{{ region }}.consumptionTextileMT,
  out.{{ region }}.consumptionHouseholdLeisureSportsMT,
  out.{{ region }}.consumptionElectronicMT,
  out.{{ region }}.consumptionTransporationMT,
  out.{{ region }}.consumptionAgricultureMT,
  out.{{ region }}.consumptionOtherMT
];
var lifecycleStart = in.startYear + lifecycleDuration;
var lifecycleEnd = in.endYear + lifecycleDuration;
change actualRecycledDeltaLifecycle by neededMarginRecycling over lifecycleStart to lifecycleEnd;

# Determine the delta to apply to waste (leading due to circulatity delay)
var actualRecycledDeltaLeading = 0;
var leadStart = in.startYear - yearsToRecycle;
var leadDelay = in.endYear - yearsToRecycle;
change actualRecycledDeltaLeading by neededMarginRecycling over leadStart to leadDelay;

# Determine how much consumption is lost due to price increase
var lostConsumptionRate = in.recyclingContentLostConsumption / 100;
var lostConsumption = actualRecycledDelta * lostConsumptionRate;
var lostConsumptionLifecycle = actualRecycledDeltaLifecycle * lostConsumptionRate;
actualRecycledDelta = actualRecycledDelta * (1 - lostConsumptionRate);

# Anticipate the leading / anticipatory change in recycling
actualRecycledDeltaLeading = actualRecycledDeltaLeading * (1 - lostConsumptionRate);

# Limit change to available plastic in other fates
var totalOtherFates = (
  out.{{ region }}.eolLandfillMT +
  out.{{ region }}.eolIncinerationMT +
  out.{{ region }}.eolMismanagedMT
);
limit actualRecycledDeltaLeading to [0, totalOtherFates];
limit actualRecycledDelta to [0, actualRecycledDeltaLeading];

# Increase recycling and determine offset
out.{{ region }}.eolRecyclingMT = (
  out.{{ region }}.eolRecyclingMT +
  actualRecycledDeltaLeading
);
var offsetProduction = actualRecycledDelta * -1;  # Consumption
var offsetProductionLeading = actualRecycledDeltaLeading * -1;  # Waste

# Apply offset for filled to EOL
distribute offsetProductionLeading across [
  out.{{ region }}.eolLandfillMT,
  out.{{ region }}.eolIncinerationMT,
  out.{{ region }}.eolMismanagedMT
] proportionally;

# Apply offset for filled to production
var priorImports = out.{{ region }}.netImportsMT;

distribute offsetProduction across [
  out.{{ region }}.netImportsMT,
  out.{{ region }}.netExportsMT,
  out.{{ region }}.domesticProductionMT
] proportionally;

var changeImports = out.{{ region }}.netImportsMT - priorImports;
limit changeImports to [, 0];

# Apply offset for filled to exports
distribute changeImports across [
  {{#each otherRegions}}
  out.{{this}}.netExportsMT{{#unless @last}},{{/unless}}
  {{/each}}
] proportionally;

# Determine offset for consumption lost due to increased minimums
var lostConsumptionOffset = lostConsumption * -1;
var lostConsumptionOffsetLifecycle = lostConsumptionLifecycle * -1;

# Apply offset for unfilled to consumption
distribute lostConsumptionOffset across [
  out.{{ region }}.consumptionAgricultureMT,
  out.{{ region }}.consumptionConstructionMT,
  out.{{ region }}.consumptionElectronicMT,
  out.{{ region }}.consumptionHouseholdLeisureSportsMT,
  out.{{ region }}.consumptionPackagingMT,
  out.{{ region }}.consumptionTransporationMT,
  out.{{ region }}.consumptionTextileMT,
  out.{{ region }}.consumptionOtherMT
] proportionally;

# Apply offset for unfilled to EOL
distribute lostConsumptionOffsetLifecycle across [
  out.{{ region }}.eolLandfillMT,
  out.{{ region }}.eolIncinerationMT,
  out.{{ region }}.eolMismanagedMT,
  out.{{ region }}.eolRecyclingMT
] proportionally;

# Apply offset for unfilled to production
priorImports = out.{{ region }}.netImportsMT;

distribute lostConsumptionOffset across [
  out.{{ region }}.netImportsMT,
  out.{{ region }}.domesticProductionMT
] proportionally;

changeImports = out.{{ region }}.netImportsMT - priorImports;
limit changeImports to [, 0];

# Apply offset for unfilled to exports
distribute changeImports across [
  {{#each otherRegions}}
  out.{{this}}.netExportsMT{{#unless @last}},{{/unless}}
  {{/each}}
] proportionally;
