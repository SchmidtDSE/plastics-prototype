# Determine target
var targetRateGoal = in.{{ region }}MinimumRecycledContent / 100;

# Determine how much delta to apply (assume phase in)
var targetRate = 0;
change targetRate by targetRateGoal over 2020 to 2050;

# Determine current recycled content, using current year recycling as
# approximation
var totalConsumption = (
  out.{{ region }}.consumptionPackagingMT + 
  out.{{ region }}.consumptionConstructionMT + 
  out.{{ region }}.consumptionTextitleMT + 
  out.{{ region }}.consumptionHouseholdLeisureSportsMT + 
  out.{{ region }}.consumptionElectronicMT + 
  out.{{ region }}.consumptionTransporationMT + 
  out.{{ region }}.consumptionAgricultureMT + 
  out.{{ region }}.consumptionOtherMT
);
var recycledContent = out.{{ region }}.eolRecyclingMT;

# Determine how much recycled content is missing
var neededRecycledContentRate = targetRate * totalConsumption;
var neededAdditionalRecycledContent = (
  neededRecycledContentRate -
  recycledContent
);
limit neededAdditionalRecycledContent to [0,];

# Determine how much delta to apply - assume gradual compliance
var actualRecycledDelta = 0;
change actualRecycledDelta by neededAdditionalRecycledContent over 2020 to 2050;

# Determine how much consumption is lost due to price increase
var lostConsumptionRate = in.recyclingContentLostConsumption / 100;
var lostConsumption = actualRecycledDelta * lostConsumptionRate;
actualRecycledDelta = actualRecycledDelta * (1 - lostConsumptionRate);

# Limit change to available plastic in other fates
var totalOtherFates = (
  out.{{ region }}.eolLandfillMT +
  out.{{ region }}.eolIncinerationMT +
  out.{{ region }}.eolMismanagedMT
);
limit actualRecycledDelta to [0, totalOtherFates];

# Increase recycling and determine offset
out.{{ region }}.eolRecyclingMT = (
  out.{{ region }}.eolRecyclingMT +
  actualRecycledDelta
);
var offsetProduction = actualRecycledDelta * -1;

# Apply offset for filled to EOL
distribute offsetProduction across [
  out.{{ region }}.eolLandfillMT,
  out.{{ region }}.eolIncinerationMT,
  out.{{ region }}.eolMismanagedMT
] proportionally;

# Apply offset for filled to production
var priorImports = out.{{ region }}.netImportsMT;

distribute offsetProduction across [
  out.{{ region }}.netImportsMT,
  out.{{ region }}.domesticProductionMT
] proportionally;

var changeImports = out.{{ region }}.netImportsMT - priorImports;
limit changeImports to [, 0];

# Apply offset for filled to exports
distribute changeImports across [
  {{#each otherRegions}}
  out.{{this}}.netExportsMT{{#unless @last}},{{/unless}}
  {{/each}}
] proportionally;

# Determine offset for consumption lost due to increased minimums
var lostConsumptionOffset = lostConsumption * -1;

# Apply offset for unfilled to consumption
distribute lostConsumptionOffset across [
  out.{{ region }}.consumptionAgricultureMT,
  out.{{ region }}.consumptionConstructionMT,
  out.{{ region }}.consumptionElectronicMT,
  out.{{ region }}.consumptionHouseholdLeisureSportsMT,
  out.{{ region }}.consumptionPackagingMT,
  out.{{ region }}.consumptionTransporationMT,
  out.{{ region }}.consumptionTextitleMT,
  out.{{ region }}.consumptionOtherMT
] proportionally;

# Apply offset for unfilled to EOL
distribute lostConsumptionOffset across [
  out.{{ region }}.eolLandfillMT,
  out.{{ region }}.eolIncinerationMT,
  out.{{ region }}.eolMismanagedMT,
  out.{{ region }}.eolRecyclingMT
] proportionally;

# Apply offset for unfilled to production
priorImports = out.{{ region }}.netImportsMT;

distribute lostConsumptionOffset across [
  out.{{ region }}.netImportsMT,
  out.{{ region }}.domesticProductionMT
] proportionally;

changeImports = out.{{ region }}.netImportsMT - priorImports;
limit changeImports to [, 0];

# Apply offset for unfilled to exports
distribute changeImports across [
  {{#each otherRegions}}
  out.{{this}}.netExportsMT{{#unless @last}},{{/unless}}
  {{/each}}
] proportionally;