# Determine delta
var totalConsumption = (
  out.{{ region }}.consumptionAgricultureMT +
  out.{{ region }}.consumptionConstructionMT +
  out.{{ region }}.consumptionElectronicMT +
  out.{{ region }}.consumptionHouseholdLeisureSportsMT +
  out.{{ region }}.consumptionPackagingMT +
  out.{{ region }}.consumptionTransportationMT +
  out.{{ region }}.consumptionTextileMT +
  out.{{ region }}.consumptionOtherMT
);
var delta = in.{{ region }}PreDeltaGoodsImportPercent / 100 * totalConsumption;

# Propogate into domestic consumption
distribute delta across [
  out.{{ region }}.consumptionAgricultureMT,
  out.{{ region }}.consumptionConstructionMT,
  out.{{ region }}.consumptionElectronicMT,
  out.{{ region }}.consumptionHouseholdLeisureSportsMT,
  out.{{ region }}.consumptionPackagingMT,
  out.{{ region }}.consumptionTransportationMT,
  out.{{ region }}.consumptionTextileMT,
  out.{{ region }}.consumptionOtherMT
] proportionally;

# Propogate into domestic waste assuming error present throughout series
distribute delta across [
  newRecyclingPercent,
  newLandfillPercent,
  newIncinerationPercent,
  newMismanagedPercent
] proportionally;

# Determine trade impact
var changeImports = delta;
limit changeImports to [0,];

var changeExports = -1 * delta;
limit changeExports to [0,];

# Report trade impact
out.{{ region }}.netImportsMT = out.{{ region }}.netImportsMT + changeImports;
out.{{ region }}.netExportsMT = out.{{ region }}.netExportsMT + changeExports;

# Balance goods trade
var offsetPartnerExports = -1 * changeImports;
distribute offsetPartnerExports across [
  {{#each otherRegions}}
  out.{{ this }}.netExportsMT{{#unless @last}},{{/unless}}
  {{/each}}
] proportionally;

var offsetPartnerImports = -1 * changeExports;
distribute offsetPartnerImports across [
  {{#each otherRegions}}
  out.{{ this }}.netImportsMT{{#unless @last}},{{/unless}}
  {{/each}}
] proportionally;

# Propogate into trade partners waste fate
var totalPartnerImports = (
  {{#each otherRegions}}
  out.{{ this }}.netImportsMT{{#unless @last}} +{{/unless}}
  {{/each}}
);

{{#each otherRegions}}
var {{ this }}PercentImport = out.{{ this }}.netImportsMT / totalPartnerImports;
var {{ this }}ChangeImports = {{ this }}PercentImport * offsetPartnerImports;
distribute {{ this }}ChangeImports across [
  out.{{ this }}.eolRecyclingMT
  out.{{ this }}.eolLandfillMT
  out.{{ this }}.eolIncinerationMT
  out.{{ this }}.eolMismanagedMT
] proportionally;
{{/each}}
