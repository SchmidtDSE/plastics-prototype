# Determine formula
var power = in.{{ region }}TaxPower;
var multiplier = in.{{ region }}TaxMultiplier;

# Determine change immediate
var percentDecreaseEnd = (in.{{ region }}PackagingTax ^ power) * multiplier;
limit percentDecreaseEnd to [0, 1];
var percentDecrease = 0;
change percentDecrease by percentDecreaseEnd over in.startYear to in.endYearImmediate;

# Determine change delayed
var delayYears = lifecycle of [out.{{ region }}.consumptionPackagingMT];
var percentDecreaseDelay = 0;
var startYearDelay = in.startYear + delayYears;
var endYearDelay = in.endYearImmediate + delayYears;
change percentDecreaseDelay by percentDecreaseEnd over startYearDelay to endYearDelay;

# Reduce consumption
var originalConsumption = out.{{ region }}.consumptionPackagingMT;
var reducedConsumption = originalConsumption * percentDecrease;
limit reducedConsumption to [0, out.{{ region }}.consumptionPackagingMT * 0.999];
out.{{ region }}.consumptionPackagingMT = out.{{ region }}.consumptionPackagingMT - reducedConsumption;

# Reduce imports
var originalImports = out.{{ region }}.netImportsMT;
distribute -1 * reducedConsumption across [
  out.{{ region }}.primaryProductionMT,
  out.{{ region }}.secondaryProductionMT,
  out.{{ region }}.netImportsMT
] proportionally;
var changeImports = out.{{ region }}.netImportsMT - originalImports;

# Reduce exports elsewhere with downstream
{{#each otherRegions}}
var {{this}}PriorNetExportsMT = out.{{this}}.netExportsMT;
{{/each}}

distribute changeImports across [
  {{#each otherRegions}}
  out.{{this}}.netExportsMT{{#unless @last}},{{/unless}}
  {{/each}}
] proportionally;

{{#each otherRegions}}
var {{this}}DeltaNetExportsMT = out.{{this}}.netExportsMT - {{this}}PriorNetExportsMT;

distribute {{this}}DeltaNetExportsMT across [
  out.{{this}}.primaryProductionMT,
  out.{{this}}.secondaryProductionMT
] proportionally;
{{/each}}

# Reduce waste on delay
var reducedWaste = originalConsumption * percentDecreaseDelay;
limit reducedWaste to [0,];

var changeWasteOverall = -1 * reducedWaste;
var wasteExportWeight = (
  out.{{ region }}.netWasteExportMT +
  in.{{ region }}DeltaWasteExport
);
distribute changeWasteOverall across [
  out.{{ region }}.eolRecyclingMT by out.{{ region }}.eolRecyclingMT,
  out.{{ region }}.eolLandfillMT by out.{{ region }}.eolLandfillMT,
  out.{{ region }}.eolIncinerationMT by out.{{ region }}.eolIncinerationMT,
  out.{{ region }}.eolMismanagedMT by out.{{ region }}.eolMismanagedMT,
  in.{{ region }}DeltaWasteExport by wasteExportWeight
] proportionally;
