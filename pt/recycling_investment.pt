###########
## Setup ##
###########

# Build some constants
var purchasingPowerParity = {{ purchasingPowerParity }};
var conversionFactorCollection = 287 / 2125000000;
var conversionFactorRecovery = 1 / 19200;
var recycleSuccessInitial = 0.75;
var totalEol = (
    out.{{ region }}.eolRecyclingMT +
    out.{{ region }}.eolIncinerationMT + 
    out.{{ region }}.eolLandfillMT + 
    out.{{ region }}.eolMismanagedMT
);
var originalEolRecycling = out.{{ region }}.eolRecyclingMT;
var originalEolRecyclingPercent = originalEolRecycling / totalEol;

######################
## Split investment ##
######################

var investment = 1000000000 * in.{{ region }}RecyclingInvestment;
var collectionInvestment = investment * 0.5;
var recoveryInvestment = investment * 0.5;

########################
## Calculate recovery ##
########################

# Find change relative
var recycleSuccessMarginNaive = (recoveryInvestment * conversionFactorRecovery)^(1/2) / 100;

# New recovery can't be more than 100
limit recycleSuccessMarginNaive to [0, 1 - recycleSuccessInitial];

# Assume half of newly recycled can't be recycled again.
var recycleSuccessMargin = recycleSuccessMarginNaive / 2;

# Find change
var potentialRecoveryChange = originalEolRecyclingPercent * recycleSuccessMargin;

# Find new recycle success
var recycleSuccess = recycleSuccessInitial * (1 + recycleSuccessMargin);
limit recycleSuccess to [0, 1];

##########################
## Calculate collection ##
##########################

# Calculate how many points were purchased
var effectiveInvestment = collectionInvestment * purchasingPowerParity;
var potentialRecyclingChangeNoSpillPoints = (
    effectiveInvestment * conversionFactorCollection
)^(1/2);

# Need between 0 and 1
var potentialCollectionChangeNoSpill = potentialRecyclingChangeNoSpillPoints / 100; 

# Account for recycle success rate, assuming they go to other streams otherwise
var potentialCollectionChange = potentialCollectionChangeNoSpill * recycleSuccess;

########################
## Apply total change ##
########################

# Determine what the change could be
var newRecyclingPercent = (
    originalEolRecyclingPercent +
    potentialCollectionChange +
    potentialRecoveryChange
);

# Update recycling but keep it in bounds between 0 and 1 (0% to 100%)
limit newRecyclingPercent to [0, 1];
var newRecyclingMT = newRecyclingPercent * totalEol;
out.{{ region }}.eolRecyclingMT = newRecyclingMT;

# Determine what the actual change was after bounds
var actualChangePercent = newRecyclingPercent - originalEolRecyclingPercent;
var actualChange = totalEol * actualChangePercent;

##############################
## Update other EOL streams ##
##############################

# Distribute actualChange across the other EOL streams proportionally to how
# large they are prior to the change
var eolOffset = -1 * actualChange;
distribute eolOffset across [
  out.{{ region }}.eolMismanagedMT,
  out.{{ region }}.eolIncinerationMT,
  out.{{ region }}.eolLandfillMT
] proportionally;

# Ensure EOL stay positive
limit out.{{ region }}.eolMismanagedMT to [0, ];
limit out.{{ region }}.eolIncinerationMT to [0, ];
limit out.{{ region }}.eolLandfillMT to [0, ];

############################
## Update virgin plastics ##
############################

# Get total production
var totalProduction = (
    out.{{ region }}.inputProduceFiberMT + 
    out.{{ region }}.inputProduceResinMT + 
    out.{{ region }}.inputAdditivesMT +
    out.{{ region }}.inputImportResinMT + 
    out.{{ region }}.inputImportArticlesMT + 
    out.{{ region }}.inputImportGoodsMT + 
    out.{{ region }}.inputImportFiberMT
);

# Assume impact to local production
var localProductionOffset = totalProduction * actualChange * -1;

# Distribute localProductionOffset across local production proportionally to how
# large they are prior to the change
distribute localProductionOffset across [
    out.{{ region }}.inputProduceFiberMT,
    out.{{ region }}.inputProduceResinMT,
    out.{{ region }}.inputAdditivesMT
] proportionally;

# Ensure that those local productions don't go below zero
limit out.{{ region }}.inputProduceFiberMT to [0,];
limit out.{{ region }}.inputProduceResinMT to [0,];
limit out.{{ region }}.inputAdditivesMT to [0,];
