# Determine capacity introduced
var investmentMillions = in.{{ region }}RecyclingInvestment * 1000;
var recyclingMTPerMillion =  1 / in.{{ region }}RecyclingCost;
var additionalCapacityEnd = investmentMillions * recyclingMTPerMillion;

# Run timeseries
var additionalWasteCapacity = 0;

var startWasteYear = in.startYear;
var endWasteYear = in.endYearGradual;

change additionalWasteCapacity by additionalCapacityEnd over startWasteYear to endWasteYear;

# Limit to the amount of waste available
var totalOtherWaste = (
  out.{{ region }}.eolLandfillMT +
  out.{{ region }}.eolIncinerationMT +
  out.{{ region }}.eolMismanagedMT
);
limit additionalWasteCapacity to [0, totalOtherWaste];

# Run timeseries, assume lifetime distribution afterwards
var consumptionDeltaDelay = 0;
var prodDeltaDelay = 0;

var lifetimeYears = lifecycle of [
  out.{{ region }}.consumptionAgricultureMT,
  out.{{ region }}.consumptionConstructionMT,
  out.{{ region }}.consumptionElectronicMT,
  out.{{ region }}.consumptionHouseholdLeisureSportsMT,
  out.{{ region }}.consumptionPackagingMT,
  out.{{ region }}.consumptionTransportationMT,
  out.{{ region }}.consumptionTextileMT,
  out.{{ region }}.consumptionOtherMT
];
var startConsumptionYear = startWasteYear + lifetimeYears;
var endConsumptionYear = endWasteYear + lifetimeYears;

var displacementRate = in.recyclingDisplacementRate / 100;
var prodReduction = additionalWasteCapacity;
var prodInductive = (1 - displacementRate) * additionalWasteCapacity;

change consumptionDeltaDelay by prodInductive over startConsumptionYear to endConsumptionYear;

# Update waste
var wasteExportWeight = (
  out.{{ region }}.netWasteExportMT +
  in.{{ region }}DeltaWasteExport
);
distribute -1 * additionalWasteCapacity across [
  out.{{ region }}.eolLandfillMT by out.{{ region }}.eolLandfillMT,
  out.{{ region }}.eolIncinerationMT by out.{{ region }}.eolIncinerationMT,
  out.{{ region }}.eolMismanagedMT by out.{{ region }}.eolMismanagedMT,
  in.{{ region }}DeltaWasteExport by wasteExportWeight
] proportionally;

out.{{ region }}.eolRecyclingMT = out.{{ region }}.eolRecyclingMT + additionalWasteCapacity;

# Redirect primary to secondary
var recoveryRate = (1 - in.{{ region }}YieldLoss / 100);
var redirected = additionalWasteCapacity * recoveryRate;

var newPrimary = out.{{ region }}.primaryProductionMT - redirected;
out.{{ region }}.primaryProductionMT = newPrimary;

var newSecondary = out.{{ region }}.secondaryProductionMT + redirected;
out.{{ region }}.secondaryProductionMT = newSecondary;

# Update consumption
distribute consumptionDeltaDelay across [
  out.{{ region }}.consumptionAgricultureMT,
  out.{{ region }}.consumptionConstructionMT,
  out.{{ region }}.consumptionElectronicMT,
  out.{{ region }}.consumptionHouseholdLeisureSportsMT,
  out.{{ region }}.consumptionPackagingMT,
  out.{{ region }}.consumptionTransportationMT,
  out.{{ region }}.consumptionTextileMT,
  out.{{ region }}.consumptionOtherMT
] proportionally;

# Update imports / production
var importsBefore = out.{{ region }}.netImportsMT;

distribute consumptionDeltaDelay across [
  out.{{ region }}.netImportsMT,
  out.{{ region }}.primaryProductionMT
] proportionally;

var importsDelta = out.{{ region }}.netImportsMT - importsBefore;

# Update exports elsewhere
distribute importsDelta across [
  {{#each otherRegions}}
  out.{{this}}.netExportsMT{{#unless @last}},{{/unless}}
  {{/each}}
] proportionally;
