# Determine capacity introduced
var investmentMillions = in.{{ region }}RecyclingInvestment * 1000;
var recyclingMTPerMillion =  1 / in.{{ region }}RecyclingCost;
var additionalCapacityEnd = investmentMillions * recyclingMTPerMillion;

# Run timeseries
var additionalWasteCapacity = 0;

var startWasteYear = in.startYear;
var endWasteYear = in.endYear;

change additionalWasteCapacity by additionalCapacityEnd over startWasteYear to endWasteYear;

# Limit to the amount of waste available
var totalOtherWaste = (
  out.{{ region }}.eolLandfillMT +
  out.{{ region }}.eolIncinerationMT +
  out.{{ region }}.eolMismanagedMT
);
limit additionalWasteCapacity to [0, totalOtherWaste];

# Run timeseries, assume lifetime distribution afterwards
var additionalProductionCapacity = 0;

var lifetimeYears = lifecycle of [
  out.{{ region }}.consumptionAgricultureMT,
  out.{{ region }}.consumptionConstructionMT,
  out.{{ region }}.consumptionElectronicMT,
  out.{{ region }}.consumptionHouseholdLeisureSportsMT,
  out.{{ region }}.consumptionPackagingMT,
  out.{{ region }}.consumptionTransporationMT,
  out.{{ region }}.consumptionTextitleMT,
  out.{{ region }}.consumptionOtherMT
];
var startConsumptionYear = startWasteYear + lifetimeYears;
var endConsumptionYear = endWasteYear + lifetimeYears;

var displacementRate = in.recyclingDisplacementRate / 100;
var prodReduction = displacementRate * additionalWasteCapacity;
var prodInductive = (1 - displacementRate) * additionalWasteCapacity;
var prodDelta = prodInductive - prodReduction;

change additionalProductionCapacity by prodDelta over startConsumptionYear to endConsumptionYear;

# Update waste
distribute -1 * additionalWasteCapacity across [
  out.{{ region }}.eolLandfillMT,
  out.{{ region }}.eolIncinerationMT,
  out.{{ region }}.eolMismanagedMT
] proportionally;

out.{{ region }}.eolRecyclingMT = out.{{ region }}.eolRecyclingMT + additionalWasteCapacity;

# Update consumption
distribute prodDelta across [
  out.{{ region }}.consumptionAgricultureMT,
  out.{{ region }}.consumptionConstructionMT,
  out.{{ region }}.consumptionElectronicMT,
  out.{{ region }}.consumptionHouseholdLeisureSportsMT,
  out.{{ region }}.consumptionPackagingMT,
  out.{{ region }}.consumptionTransporationMT,
  out.{{ region }}.consumptionTextitleMT,
  out.{{ region }}.consumptionOtherMT
] proportionally;

# Update imports / production
var importsBefore = out.{{ region }}.netImportsMT;

distribute prodDelta across [
  out.{{ region }}.netImportsMT,
  out.{{ region }}.domesticProductionMT
] proportionally;

var importsDelta = out.{{ region }}.netImportsMT - importsBefore;

# Update exports elsewhere
distribute importsDelta across [
  {{#each otherRegions}}
  out.{{this}}.netExportsMT{{#unless @last}},{{/unless}}
  {{/each}}
] proportionally;
