# Determine target
var targetRateGoal = in.{{ region }}MinimumReuse{{ reuseType }} / 100;

# Determine how long to see impact
var lifecycleDuration = lifecycle of [
  out.{{ region }}.consumptionPackagingMT,
  out.{{ region }}.consumptionConstructionMT,
  out.{{ region }}.consumptionTextileMT,
  out.{{ region }}.consumptionHouseholdLeisureSportsMT,
  out.{{ region }}.consumptionElectronicMT,
  out.{{ region }}.consumptionTransportationMT,
  out.{{ region }}.consumptionAgricultureMT,
  out.{{ region }}.consumptionOtherMT
] if {{ minPackagingMultiplier }} == 1 else lifecycle of [
  out.{{ region }}.consumptionPackagingMT
];

# Determine how much delta to apply (assume phase in)
var targetRate = 0;
var delayStart = in.startYear + lifecycleDuration;
var delayEnd = in.endYearGradual + lifecycleDuration;
change targetRate by targetRateGoal over delayStart to delayEnd;

# Determine current reuse content, using current year reuse as
# approximation
var totalConsumption = (
  out.{{ region }}.consumptionPackagingMT + 
  out.{{ region }}.consumptionConstructionMT + 
  out.{{ region }}.consumptionTextileMT + 
  out.{{ region }}.consumptionHouseholdLeisureSportsMT + 
  out.{{ region }}.consumptionElectronicMT + 
  out.{{ region }}.consumptionTransportationMT + 
  out.{{ region }}.consumptionAgricultureMT + 
  out.{{ region }}.consumptionOtherMT + 
  out.{{ region }}.netExportsMT
);
var reusedContent = out.{{region}}.eolReuseMT;

# Determine how much to move out of other fates
var massReuse = targetRate * totalConsumption;
var reuseRedirection = (
  massReuse -
  reusedContent 
);
limit reuseRedirection to [0,];

# Deal with packaging separately if the template requires it. Here, minPackagingMultiplier acts as a
# Boolean value determines if it should be applied in packaging where 0 means it is limited to
# packaging and 1 means applies to all sectors.
var percentInScope = out.{{ region }}.consumptionPackagingMT / (
  out.{{ region }}.consumptionPackagingMT + 
  out.{{ region }}.consumptionConstructionMT + 
  out.{{ region }}.consumptionTextileMT + 
  out.{{ region }}.consumptionHouseholdLeisureSportsMT + 
  out.{{ region }}.consumptionElectronicMT + 
  out.{{ region }}.consumptionTransportationMT + 
  out.{{ region }}.consumptionAgricultureMT + 
  out.{{ region }}.consumptionOtherMT + 
  out.{{ region }}.netExportsMT
);
limit percentInScope to [{{ minPackagingMultiplier }}, 1];
var candidatePercent = in.percentReusableCandidate / 100;
reuseRedirection = reuseRedirection * percentInScope * candidatePercent;
limit reuseRedirection to [0,];

# Determine how much delta to apply - assume gradual compliance
var actualReuseDelta = 0;
change actualReuseDelta by reuseRedirection over delayStart to delayEnd;

# Determine the delta to apply to waste
var actualReuseDeltaWasteLeading = 0;
var leadStart = in.startYear + lifecycleDuration;
var leadDelay = in.endYearGradual + lifecycleDuration;
change actualReuseDeltaWasteLeading by reuseRedirection over leadStart to leadDelay;

# Determine how much consumption is lost due to price increase
var lostConsumptionRate = in.reuseLostConsumption / 100;
var lostConsumption = actualReuseDelta * lostConsumptionRate;
var lostConsumptionLifecycle = reuseRedirection * lostConsumptionRate;
var lostConsumptionRateAdj = lostConsumptionRate;  # Handle increased material later
actualReuseDelta = actualReuseDelta * (1 - lostConsumptionRateAdj);

# Anticipate the leading / anticipatory change in recycling
actualReuseDeltaWasteLeading = actualReuseDeltaWasteLeading * (1 - lostConsumptionRateAdj);

# Limit change to available plastic in other fates
var recyclingStart = out.{{ region }}.eolRecyclingMT;
var totalOtherFates = (
  out.{{ region }}.eolRecyclingMT +
  out.{{ region }}.eolLandfillMT +
  out.{{ region }}.eolIncinerationMT +
  out.{{ region }}.eolMismanagedMT +
  out.{{ region }}.netExportsMT
);
limit actualReuseDeltaWasteLeading to [0, totalOtherFates];
limit actualReuseDelta to [0, totalOtherFates];

# Increase reuse and determine offset.
out.{{ region }}.eolReuseMT = (
  out.{{ region }}.eolReuseMT +
  actualReuseDeltaWasteLeading
);
var offsetProduction = actualReuseDelta * -1;  # Consumption
var offsetWasteLeading = actualReuseDeltaWasteLeading * -1;  # Waste

# Apply offset for filled to EOL
var wasteExportWeight = (
  out.{{ region }}.netWasteExportMT +
  in.{{ region }}DeltaWasteExport
);
distribute offsetWasteLeading across [
  out.{{ region }}.eolRecyclingMT by out.{{ region }}.eolRecyclingMT,
  out.{{ region }}.eolLandfillMT by out.{{ region }}.eolLandfillMT,
  out.{{ region }}.eolIncinerationMT by out.{{ region }}.eolIncinerationMT,
  out.{{ region }}.eolMismanagedMT by out.{{ region }}.eolMismanagedMT,
  in.{{ region }}DeltaWasteExport by wasteExportWeight
] proportionally;

# Apply offset for filled to production
var priorImports = out.{{ region }}.netImportsMT;

distribute offsetProduction across [
  out.{{ region }}.netImportsMT,
  out.{{ region }}.primaryProductionMT,
  out.{{ region }}.secondaryProductionMT
] proportionally;

{{#if isPackaging}}
distribute offsetProduction across [
  out.{{ region }}.consumptionPackagingMT
] proportionally;
{{/if}}
{{#if isAll}}
distribute offsetProduction across [
  out.{{ region }}.consumptionPackagingMT,
  out.{{ region }}.consumptionConstructionMT,
  out.{{ region }}.consumptionTextileMT,
  out.{{ region }}.consumptionHouseholdLeisureSportsMT,
  out.{{ region }}.consumptionElectronicMT,
  out.{{ region }}.consumptionTransportationMT,
  out.{{ region }}.consumptionAgricultureMT,
  out.{{ region }}.consumptionOtherMT,
  out.{{ region }}.netExportsMT
] proportionally;
{{/if}}

var changeImports = out.{{ region }}.netImportsMT - priorImports;
limit changeImports to [, 0];

# Apply offset for filled to exports
distribute changeImports across [
  {{#each otherRegions}}
  out.{{this}}.netExportsMT{{#unless @last}},{{/unless}}
  {{/each}}
] proportionally;

# Determine offset for consumption lost due to increased minimums
var lostConsumptionOffset = lostConsumption * -1;
var lostConsumptionOffsetLifecycle = lostConsumptionLifecycle * -1;

# Apply offset for unfilled to consumption
{{#if isPackaging}}
distribute lostConsumptionOffset across [
  out.{{ region }}.consumptionPackagingMT
] proportionally;
{{/if}}
{{#if isAll}}
distribute lostConsumptionOffset across [
  out.{{ region }}.consumptionAgricultureMT,
  out.{{ region }}.consumptionConstructionMT,
  out.{{ region }}.consumptionElectronicMT,
  out.{{ region }}.consumptionHouseholdLeisureSportsMT,
  out.{{ region }}.consumptionPackagingMT,
  out.{{ region }}.consumptionTransportationMT,
  out.{{ region }}.consumptionTextileMT,
  out.{{ region }}.consumptionOtherMT
] proportionally;
{{/if}}

# Apply offset for unfilled to EOL
wasteExportWeight = (
  out.{{ region }}.netWasteExportMT +
  in.{{ region }}DeltaWasteExport
);
distribute lostConsumptionOffsetLifecycle across [
  out.{{ region }}.eolLandfillMT by out.{{ region }}.eolLandfillMT,
  out.{{ region }}.eolIncinerationMT by out.{{ region }}.eolIncinerationMT,
  out.{{ region }}.eolMismanagedMT by out.{{ region }}.eolMismanagedMT,
  out.{{ region }}.eolRecyclingMT by out.{{ region }}.eolRecyclingMT,
  in.{{ region }}DeltaWasteExport by wasteExportWeight
] proportionally;

# Apply offset for unfilled to production
priorImports = out.{{ region }}.netImportsMT;

distribute lostConsumptionOffset across [
  out.{{ region }}.netImportsMT,
  out.{{ region }}.primaryProductionMT,
  out.{{ region }}.secondaryProductionMT
] proportionally;

changeImports = out.{{ region }}.netImportsMT - priorImports;
limit changeImports to [, 0];

# Apply offset for unfilled to exports
distribute changeImports across [
  {{#each otherRegions}}
  out.{{this}}.netExportsMT{{#unless @last}},{{/unless}}
  {{/each}}
] proportionally;

# Determine added material amount
var reusableAddedMaterialPercent = in.reusableAddedMaterial / 100;
var exhaustionRate = in.{{ region }}ReuseExhaustion / 100;

# Move some of the reused materials which exhausted to recycled domestically with understanding of
# increases due to added material.
var exhausedMMT = actualReuseDeltaWasteLeading * exhaustionRate * (1 + reusableAddedMaterialPercent);
var exhaustionPercentRecycled = in.exhaustedPercentRecycled / 100;
limit exhausedMMT to [0,];
out.{{ region }}.eolReuseMT = (
  out.{{ region }}.eolReuseMT -
  exhausedMMT
);
out.{{ region }}.eolRecyclingMT = (
  out.{{ region }}.eolRecyclingMT +
  exhausedMMT * exhaustionPercentRecycled
);
distribute (exhausedMMT * (1 - exhaustionPercentRecycled)) across [
  out.{{ region }}.eolLandfillMT,
  out.{{ region }}.eolIncinerationMT,
  out.{{ region }}.eolMismanagedMT
] proportionally;

# Added material for start of life
var increaseMaterialStartOfLife = actualReuseDelta * reusableAddedMaterialPercent * exhaustionRate;

# Added material for production
{{#if isPackaging}}
distribute increaseMaterialStartOfLife across [
  out.{{ region }}.consumptionPackagingMT
] proportionally;
{{/if}}
{{#if isAll}}
distribute increaseMaterialStartOfLife across [
  out.{{ region }}.consumptionAgricultureMT,
  out.{{ region }}.consumptionConstructionMT,
  out.{{ region }}.consumptionElectronicMT,
  out.{{ region }}.consumptionHouseholdLeisureSportsMT,
  out.{{ region }}.consumptionPackagingMT,
  out.{{ region }}.consumptionTransportationMT,
  out.{{ region }}.consumptionTextileMT,
  out.{{ region }}.consumptionOtherMT
] proportionally;
{{/if}}

# Added material for consumption
priorImports = out.{{ region }}.netImportsMT;

var beforeSecondary = out.{{ region }}.secondaryProductionMT;
distribute increaseMaterialStartOfLife across [
  out.{{ region }}.netImportsMT,
  out.{{ region }}.primaryProductionMT,
  out.{{ region }}.secondaryProductionMT
] proportionally;
var afterSecondary = out.{{ region }}.secondaryProductionMT;

changeImports = out.{{ region }}.netImportsMT - priorImports;

distribute changeImports across [
  {{#each otherRegions}}
  out.{{this}}.netExportsMT{{#unless @last}},{{/unless}}
  {{/each}}
] proportionally;

# Pull into secondary
var yieldLoss = in.{{ region }}YieldLoss / 100;
var changeSecondary = afterSecondary - beforeSecondary;
var requiredRecycling = changeSecondary / yieldLoss - (exhausedMMT * exhaustionPercentRecycled);

out.{{ region }}.eolRecyclingMT = (
  out.{{ region }}.eolRecyclingMT +
  requiredRecycling
);
distribute (-1 * requiredRecycling) across [
  out.{{ region }}.eolLandfillMT,
  out.{{ region }}.eolIncinerationMT,
  out.{{ region }}.eolMismanagedMT
] proportionally;
