# Note the original recycling before intervention
var originalRecyclingMT = out.{{ region }}.eolRecyclingMT;

# Assume phase in
var targetRateGoal = in.{{ region }}MinimumRecyclingRate / 100;
var targetRate = 0;
change targetRate by targetRateGoal over 2024 to 2050;
var displacementRate = in.recyclingDisplacementRate / 100;
limit targetRate to [0, 1];

# Get the total waste
var totalWaste = (
  out.{{ region }}.eolRecyclingMT +
  out.{{ region }}.eolLandfillMT +
  out.{{ region }}.eolIncinerationMT +
  out.{{ region }}.eolMismanagedMT
);

# Get the delta needed to achieve the goal
var targetMT = totalWaste * targetRate;
var shortageMT = targetMT - originalRecyclingMT;
limit shortageMT to [0,];

# Apply the change to recycling - assume gradual compliance
var newRecyclingMT = originalRecyclingMT;
change newRecyclingMT by shortageMT over 2024 to 2050;
var currentChange = newRecyclingMT - originalRecyclingMT;
out.{{ region }}.eolRecyclingMT = newRecyclingMT;

# Offset the change in the other EOL types
var offsetMT = -1 * currentChange;
distribute offsetMT across [
  out.{{ region }}.eolLandfillMT,
  out.{{ region }}.eolIncinerationMT,
  out.{{ region }}.eolMismanagedMT
] proportionally;

# Assume lagging by three years for production and consumption
var lagYears = 3;
var recoveryRate = (1 - in.yieldLoss / 100);
var newRecyclingMTLag = originalRecyclingMT;
change newRecyclingMTLag by shortageMT over 2024 + lagYears to 2050 + lagYears;
var lagChange = (newRecyclingMTLag - originalRecyclingMT) * recoveryRate;

# Inductive demand - the part that isn't displaced.
var displacedPlasticsMT = displacementRate * lagChange;
var displacedPlasticsOffsetMT = displacedPlasticsMT * -1;
var inductiveDemandRate = 1 - displacementRate;
var newInductivePlasticsMT = inductiveDemandRate * lagChange;

# Bump consumption by inductive demand
distribute newInductivePlasticsMT across [
  out.{{ region }}.consumptionAgricultureMT,
  out.{{ region }}.consumptionConstructionMT,
  out.{{ region }}.consumptionElectronicMT,
  out.{{ region }}.consumptionHouseholdLeisureSportsMT,
  out.{{ region }}.consumptionPackagingMT,
  out.{{ region }}.consumptionTransporationMT,
  out.{{ region }}.consumptionTextitleMT,
  out.{{ region }}.consumptionOtherMT
] proportionally;

# Bump EOL by inductive demand
distribute newInductivePlasticsMT across [
  out.{{ region }}.eolRecyclingMT,
  out.{{ region }}.eolLandfillMT,
  out.{{ region }}.eolIncinerationMT,
  out.{{ region }}.eolMismanagedMT
] proportionally;

# Offset production local
var priorImports = out.{{ region }}.netImportsMT;
distribute displacedPlasticsOffsetMT across [
  out.{{ region }}.netImportsMT,
  out.{{ region }}.domesticProductionMT
] proportionally;
var newImportsAbs = out.{{ region }}.netImportsMT;

# Offset exports elsewhere
var newImports = newImportsAbs - priorImports;
distribute newImports across [
  {{#each otherRegions}}
  out.{{this}}.netExportsMT{{#unless @last}},{{/unless}}
  {{/each}}
] proportionally;
