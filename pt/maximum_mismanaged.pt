# Figuring out the target value
var targetMismanagedRate = in.{{region}}MaximumMismanagedRate / 100;
var totalWaste = (
  out.{{region}}.eolMismanagedMT +
  out.{{region}}.eolIncinerationMT +
  out.{{region}}.eolLandfillMT +
  out.{{region}}.eolRecyclingMT
);
var targetMismanaged = targetMismanagedRate * totalWaste;

# Figuring out the delta
var projected = out.{{region}}.eolMismanagedMT; # BAU
var mismanagedDelta = targetMismanaged - projected;

# Don't make it worse: if projected was smaller
# than targetMismanaged, the region is doing better than
# the policy so don't increase mismanaged.
limit mismanagedDelta to [,0];

# Update the projected value for mismanaged assuming gradual compliance
var misManagedDeltaGradual = 0;
change misManagedDeltaGradual by mismanagedDelta over in.startYear to in.endYearGradual;

# Apply
out.{{region}}.eolMismanagedMT = projected + misManagedDeltaGradual;

# Record the prior EOLs before updates
var priorRecycling = out.{{region}}.eolRecyclingMT;
var priorIncineration = out.{{region}}.eolIncinerationMT;
var priorLandfill = out.{{region}}.eolLandfillMT;

# Distribute to the other fates - immediate
var otherDelta = -1 * misManagedDeltaGradual;
distribute otherDelta across [
  out.{{region}}.eolIncinerationMT,
  out.{{region}}.eolLandfillMT,
  out.{{region}}.eolRecyclingMT
] proportionally;

# Delay change to production
var delayProduction = lifecycle of [ out.{{region}}.eolRecyclingMT ];
var misManagedDeltaGradualDelayed = 0;
var delayStart = in.startYear + delayProduction;
var delayEnd = in.endYearGradual + delayProduction;
change misManagedDeltaGradualDelayed by mismanagedDelta over delayStart to delayEnd;

# Delay change to production's new waste
var delayLifecycle = lifecycle of [
  out.{{ region }}.consumptionAgricultureMT,
  out.{{ region }}.consumptionConstructionMT,
  out.{{ region }}.consumptionElectronicMT,
  out.{{ region }}.consumptionHouseholdLeisureSportsMT,
  out.{{ region }}.consumptionPackagingMT,
  out.{{ region }}.consumptionTransporationMT,
  out.{{ region }}.consumptionTextileMT,
  out.{{ region }}.consumptionOtherMT
] + delayProduction;
var misManagedDeltaGradualLifecycle = 0;
var lifecycleStart = in.startYear + delayLifecycle;
var lifecycleEnd = in.endYearGradual + delayLifecycle;
change misManagedDeltaGradualLifecycle by mismanagedDelta over lifecycleStart to lifecycleEnd;

# Determine recycling delta delayed for production
var newRecyclingDelayed = priorRecycling;
var newIncinerationDelayed = priorIncineration;
var newLandfillDelayed = priorLandfill;

var otherDeltaDelayed = -1 * misManagedDeltaGradualDelayed;

distribute otherDeltaDelayed across [
  newRecyclingDelayed,
  newIncinerationDelayed,
  newLandfillDelayed
] proportionally;

# Determine recycling delta delayed for waste after increased production
var lifecycleRecyclingDelayed = priorRecycling;
var lifecycleIncinerationDelayed = priorIncineration;
var lifecycleLandfillDelayed = priorLandfill;

var otherDeltaLifecycle = -1 * misManagedDeltaGradualLifecycle;

distribute otherDeltaLifecycle across [
  lifecycleRecyclingDelayed,
  lifecycleIncinerationDelayed,
  lifecycleLandfillDelayed
] proportionally;

# Apply recovery
var recovery = (1 - in.{{ region }}YieldLoss / 100);
var recyclingDeltaDelayed = (newRecyclingDelayed - priorRecycling) * recovery;
var recyclingDeltaLifecycle = (lifecycleRecyclingDelayed - priorRecycling) * recovery;

# Determine inductive demand
var displacementRate = in.recyclingDisplacementRate / 100;
var displacedPlasticsMT = recyclingDeltaDelayed;
var displacedPlasticsOffsetMT = displacedPlasticsMT * -1;
var inductiveDemandRate = 1 - displacementRate;
var newInductivePlasticsMT = inductiveDemandRate * recyclingDeltaDelayed;
var newInductivePlasticsMTLifecycle = inductiveDemandRate * recyclingDeltaLifecycle;

# Bump consumption by inductive demand
distribute newInductivePlasticsMT across [
  out.{{ region }}.consumptionAgricultureMT,
  out.{{ region }}.consumptionConstructionMT,
  out.{{ region }}.consumptionElectronicMT,
  out.{{ region }}.consumptionHouseholdLeisureSportsMT,
  out.{{ region }}.consumptionPackagingMT,
  out.{{ region }}.consumptionTransporationMT,
  out.{{ region }}.consumptionTextileMT,
  out.{{ region }}.consumptionOtherMT
] proportionally;

# Bump EOL by inductive demand
distribute newInductivePlasticsMTLifecycle across [
  out.{{ region }}.eolRecyclingMT,
  out.{{ region }}.eolLandfillMT,
  out.{{ region }}.eolIncinerationMT,
  out.{{ region }}.eolMismanagedMT
] proportionally;

# Offset production local
var priorImports = out.{{ region }}.netImportsMT;
distribute displacedPlasticsOffsetMT across [
  out.{{ region }}.netImportsMT,
  out.{{ region }}.domesticProductionMT
] proportionally;
var newImportsAbs = out.{{ region }}.netImportsMT;

# Offset exports elsewhere
var importsDelta = newImportsAbs - priorImports;
distribute importsDelta across [
  {{#each otherRegions}}
  out.{{this}}.netExportsMT{{#unless @last}},{{/unless}}
  {{/each}}
] proportionally;

