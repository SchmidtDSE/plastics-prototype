# Figuring out the target value
var targetMismanagedRate = in.{{region}}MaximumMismanagedRate / 100;
var totalWaste = (
  out.{{region}}.eolMismanagedMT +
  out.{{region}}.eolIncinerationMT +
  out.{{region}}.eolLandfillMT +
  out.{{region}}.eolRecyclingMT
);
var targetMismanaged = targetMismanagedRate * totalWaste;

# Figuring out the delta
var projected = out.{{region}}.eolMismanagedMT; # BAU
var mismanagedDelta = targetMismanaged - projected;

# Don't make it worse: if projected was smaller
# than targetMismanaged, the region is doing better than
# the policy so don't increase mismanaged.
limit mismanagedDelta to [,0];

# Update the projected value for mismanaged assuming gradual compliance
var misManagedDeltaGradual = 0;
change misManagedDeltaGradual by mismanagedDelta over 2024 to 2050;

# Apply
out.{{region}}.eolMismanagedMT = projected + misManagedDeltaGradual;

# Record the prior EOLs before updates
var priorRecycling = out.{{region}}.eolRecyclingMT;
var priorIncineration = out.{{region}}.eolIncinerationMT;
var priorLandfill = out.{{region}}.eolLandfillMT;

# Distribute to the other fates - immediate
var otherDelta = -1 * misManagedDeltaGradual;
distribute otherDelta across [
  out.{{region}}.eolIncinerationMT,
  out.{{region}}.eolLandfillMT,
  out.{{region}}.eolRecyclingMT
] proportionally;

# Delay change to production by 3 years
var delay = 3;
var misManagedDeltaGradualDelayed = 0;
change misManagedDeltaGradualDelayed by mismanagedDelta over 2024 + delay to 2050 + delay;

# Determine recycling delta delayed for production
var newRecyclingDelayed = priorRecycling;
var newIncinerationDelayed = priorIncineration;
var newLandfillDelayed = priorLandfill;

var otherDeltaDelayed = -1 * misManagedDeltaGradualDelayed;

distribute otherDeltaDelayed across [
  newRecyclingDelayed,
  newIncinerationDelayed,
  newLandfillDelayed
] proportionally;

var recovery = (1 - in.yieldLoss / 100);
var recyclingDeltaDelayed = (newRecyclingDelayed - priorRecycling) * recovery;

# Determine inductive demand
var displacementRate = in.recyclingDisplacementRate / 100;
var displacedPlasticsMT = displacementRate * recyclingDeltaDelayed;
var displacedPlasticsOffsetMT = displacedPlasticsMT * -1;
var inductiveDemandRate = 1 - displacementRate;
var newInductivePlasticsMT = inductiveDemandRate * recyclingDeltaDelayed;

# Bump consumption by inductive demand
distribute newInductivePlasticsMT across [
  out.{{ region }}.consumptionAgricultureMT,
  out.{{ region }}.consumptionConstructionMT,
  out.{{ region }}.consumptionElectronicMT,
  out.{{ region }}.consumptionHouseholdLeisureSportsMT,
  out.{{ region }}.consumptionPackagingMT,
  out.{{ region }}.consumptionTransporationMT,
  out.{{ region }}.consumptionTextitleMT,
  out.{{ region }}.consumptionOtherMT
] proportionally;

# Bump EOL by inductive demand
distribute newInductivePlasticsMT across [
  out.{{ region }}.eolRecyclingMT,
  out.{{ region }}.eolLandfillMT,
  out.{{ region }}.eolIncinerationMT,
  out.{{ region }}.eolMismanagedMT
] proportionally;

# Offset production local
var priorImports = out.{{ region }}.netImportsMT;
distribute displacedPlasticsOffsetMT across [
  out.{{ region }}.netImportsMT,
  out.{{ region }}.domesticProductionMT
] proportionally;
var newImportsAbs = out.{{ region }}.netImportsMT;

# Offset exports elsewhere
var importsDelta = newImportsAbs - priorImports;
distribute importsDelta across [
  {{#each otherRegions}}
  out.{{this}}.netExportsMT{{#unless @last}},{{/unless}}
  {{/each}}
] proportionally;

